<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentException_Invalid_offset_and_size" xml:space="preserve">
    <value>Offset e size inválidos.</value>
  </data>
  <data name="ArgumentException_Invalid_reserve_capacity" xml:space="preserve">
    <value>Capacidade de reserva inválida.</value>
  </data>
  <data name="ArgumentIsNullOrWhitespace" xml:space="preserve">
    <value>O parâmetro '{0}' não pode ser null ou em branco.</value>
  </data>
  <data name="AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties" xml:space="preserve">
    <value>O tipo de metadados associado ao tipo '{0}' contém as seguintes propriedades ou campos desconhecidos: {1}. Verifique se os nomes desses membros correspondem aos nomes das propriedades no tipo principal.</value>
  </data>
  <data name="AttributeStore_Type_Must_Be_Public" xml:space="preserve">
    <value>O tipo '{0}' deve ser público.</value>
  </data>
  <data name="AttributeStore_Unknown_Method" xml:space="preserve">
    <value>O tipo '{0}' não possui um método público chamado '{1}'.</value>
  </data>
  <data name="AttributeStore_Unknown_Property" xml:space="preserve">
    <value>O tipo '{0}' não possui uma propriedade pública chamada '{1}'.</value>
  </data>
  <data name="CompareAttribute_MustMatch" xml:space="preserve">
    <value>'{0}' e '{1}' não combinam.</value>
  </data>
  <data name="CompareAttribute_UnknownProperty" xml:space="preserve">
    <value>Não foi encontrada a propriedade {0}.</value>
  </data>
  <data name="CreditCardAttribute_Invalid" xml:space="preserve">
    <value>O campo {0} não é um número válido de cartão de crédito.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Must_Return_ValidationResult" xml:space="preserve">
    <value>O método '{0}' do tipo CustomValidationAttribute no tipo '{1}' deve retornar System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success para representar sucesso.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Not_Found" xml:space="preserve">
    <value>O método '{0}' do tipo CustomValidationAttribute não existe no tipo '{1}' ou não é público ou estático.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Required" xml:space="preserve">
    <value>O CustomValidationAttribute.Method não foi definido.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Signature" xml:space="preserve">
    <value>O método '{1}' do tipo CustomValidationAttribute no tipo '{1}' deve ter a assinatura:  public static ValidationResult {0}(object value, ValidationContext context).  O valor deve ser um tipo concreto. O parâmetro ValidationContext é opcional.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Conversion_Failed" xml:space="preserve">
    <value>Não foi possível converter o valor do tipo '{0}' para '{1}' como esperado pelo método {2}.{3}.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Must_Be_Public" xml:space="preserve">
    <value>Tipo de validação personalizado '{0}' deve ser público.</value>
  </data>
  <data name="CustomValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} inválido(a).</value>
  </data>
  <data name="CustomValidationAttribute_ValidatorType_Required" xml:space="preserve">
    <value>CustomValidationAttribute.ValidatorType não informado.</value>
  </data>
  <data name="DataTypeAttribute_EmptyDataTypeString" xml:space="preserve">
    <value>O valor de DataType não pode ser nulo em vazio.</value>
  </data>
  <data name="DataTypeAttribute_InvalidCurrentyValue" xml:space="preserve">
    <value>Valor inválido para '{0}'.</value>
  </data>
  <data name="DateGreaterThan_ValidationError" xml:space="preserve">
    <value>A data {0} deve ser maior que {1}</value>
  </data>
  <data name="DisplayAttribute_PropertyNotSet" xml:space="preserve">
    <value>A propriedade {0} não foi definida.  Use o método {1} para recuperar o valor.</value>
  </data>
  <data name="EmailAddressAttribute_Invalid" xml:space="preserve">
    <value>O campo {0} não possui um email válido.</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>EnumDataTypeAttribute não pode ser nulo.</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeNeedsToBeAnEnum" xml:space="preserve">
    <value>O tipo '{0}' deve ser um enum.</value>
  </data>
  <data name="FileExtensionsAttribute_Invalid" xml:space="preserve">
    <value>O campo {0} aceita apenas arquivos com as extensões: {1}</value>
  </data>
  <data name="LocalizableString_LocalizationFailed" xml:space="preserve">
    <value>A propriedade não foi recuperada '{0}' por falha na localization. O tipo '{1}' não é público ou não contém uma propriedade public static string com o nome '{2}'.</value>
  </data>
  <data name="MaxLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>O valor Length de MaxLengthAttribute de ser maior que zero. Use MaxLength() sem parâmetros para indicar que essa string ou array pode ter o tamanho máximo permitido.</value>
  </data>
  <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>O campo {0} deve ser uma string ou array com tamanho máximo de '{1}'.</value>
  </data>
  <data name="MetadataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>MetadataClassType não pode ser null.</value>
  </data>
  <data name="MinLengthAttribute_InvalidMinLength" xml:space="preserve">
    <value>O valor Length de MinLengthAttribute deve maior ou igual a zero.</value>
  </data>
  <data name="MinLengthAttribute_ValidationError" xml:space="preserve">
    <value>O campo {0} deve ser uma string ou array com o tamanho minimo de '{1}'.</value>
  </data>
  <data name="PhoneAttribute_Invalid" xml:space="preserve">
    <value>O campo {0} não possui um telefone válido.</value>
  </data>
  <data name="PlaceType_DataCenter" xml:space="preserve">
    <value>Centro de processamento de dados</value>
  </data>
  <data name="PlaceType_Stock" xml:space="preserve">
    <value>Estoque</value>
  </data>
  <data name="RangeAttribute_ArbitraryTypeNotIComparable" xml:space="preserve">
    <value>O tipo {0} deve implementar {1}.</value>
  </data>
  <data name="RangeAttribute_MinGreaterThanMax" xml:space="preserve">
    <value>O valor máximo '{0}' deve ser maior ou igual ao valor mínimo '{1}'.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Min_And_Max" xml:space="preserve">
    <value>Os valores mínimo e máximo devem ser informados.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Operand_Type" xml:space="preserve">
    <value>O OperandType deve ser informado quando o valor mínimo e máximo forem strings.</value>
  </data>
  <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>O valor do campo {0} deve estar entre {1} e {2}.</value>
  </data>
  <data name="RegexAttribute_ValidationError" xml:space="preserve">
    <value>O valor do campo {0} deve satisfazer a expressão regular '{1}'.</value>
  </data>
  <data name="RegularExpressionAttribute_Empty_Pattern" xml:space="preserve">
    <value>O pattern deve ser uma expressão regular válida.</value>
  </data>
  <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>O campo {0} é obrigatório.</value>
  </data>
  <data name="StringLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>O tamanho máximo deve ser um inteiro positivo</value>
  </data>
  <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>O valor do campo {0} deve ser uma string com tamanho máximo de {1}.</value>
  </data>
  <data name="StringLengthAttribute_ValidationErrorIncludingMinimum" xml:space="preserve">
    <value>O campo {0} deve ser um texto com no mínimo {2} e no máximo {1} caracteres.</value>
  </data>
  <data name="UrlAttribute_Invalid" xml:space="preserve">
    <value>O valor do campo {0} não é uma URL http, https, ou ftp válida.</value>
  </data>
  <data name="ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource" xml:space="preserve">
    <value>O valor de ErrorMessageString ou ErrorMessageResourceName deve ser definido, mas não os dois.</value>
  </data>
  <data name="ValidationAttribute_IsValid_NotImplemented" xml:space="preserve">
    <value>IsValid(object value) não foi implemetado nessa classe.  O método preferencial é GetValidationResult() e a classe deve sobreescrever IsValid(object value, ValidationContext context).</value>
  </data>
  <data name="ValidationAttribute_NeedBothResourceTypeAndResourceName" xml:space="preserve">
    <value>Tanto ErrorMessageResourceType como ErrorMessageResourceName devem ser informados nesse atributo.</value>
  </data>
  <data name="ValidationAttribute_ResourcePropertyNotStringType" xml:space="preserve">
    <value>A propriedade '{0}' no resource do tipo '{1}' não é uma string.</value>
  </data>
  <data name="ValidationAttribute_ResourceTypeDoesNotHaveProperty" xml:space="preserve">
    <value>O resource do tipo '{0}' não possui uma propriedade statica com o nome '{1}'.</value>
  </data>
  <data name="ValidationAttribute_ValidationError" xml:space="preserve">
    <value>O valor do campo {0} é inválido.</value>
  </data>
  <data name="ValidationContextServiceContainer_ItemAlreadyExists" xml:space="preserve">
    <value>Um serviço do tipo '{0}' já existe no container.</value>
  </data>
  <data name="ValidationContext_Must_Be_Method" xml:space="preserve">
    <value>O ValidationContext para o tipo '{0}', membro '{1}' deve possuir MethodInfo.</value>
  </data>
  <data name="Validator_InstanceMustMatchValidationContextInstance" xml:space="preserve">
    <value>A instância fornecida deve ser do tipo ObjectInstance no ValidationContext fornecido.</value>
  </data>
  <data name="Validator_Property_Value_Wrong_Type" xml:space="preserve">
    <value>O valor da propriedade '{0}' deve ser do tipo '{1}'.</value>
  </data>
</root>